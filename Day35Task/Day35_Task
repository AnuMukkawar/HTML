Exercise 1-
SELECT title FROM movies;
SELECT director FROM movies;SELECT title,director FROM movies;
SELECT title,year FROM movies;
SELECT * FROM movies;

Exercise 2
SELECT * FROM movies where id=6;
SELECT * FROM movies where year between 2000 and 2010;
SELECT * FROM movies where year not between 2000 and 2010;
SELECT * FROM movies order by year limit 5

Exercise 3
SELECT * FROM movies where title like 'Toy%';
SELECT * FROM movies where Director='John Lasseter';
SELECT * FROM movies where Director<>'John Lasseter';
SELECT * FROM movies where title like 'WALL-%';

Exercise 4
SELECT distinct director FROM movies order by director;
SELECT * FROM movies order by year desc limit 4;
SELECT * FROM movies order by title limit 5;
SELECT * FROM movies order by title limit 5 offset 5;

Exercise 5
SELECT * FROM north_american_cities where country='Canada';
SELECT * FROM north_american_cities where country='United States' order by latitude desc;
SELECT * FROM north_american_cities where longitude < -87.629798
ORDER BY longitude ASC;
SELECT * FROM north_american_cities where country='Mexico' order by population desc limit 2;
SELECT city, population FROM north_american_cities WHERE country LIKE 'United States' 
ORDER BY population desc LIMIT 2 OFFSET 2;

Exercise 6
SELECT * FROM moviesINNER JOIN boxoffice 
     ON movies.id = boxoffice.movie_id;
 SELECT * FROM movies 
    INNER JOIN boxoffice 
        ON movies.id = boxoffice.movie_id 
        AND boxoffice.international_sales > boxoffice.domestic_sales;
SELECT * FROM movies 
    INNER JOIN boxoffice 
        ON movies.id = boxoffice.movie_id 
  ORDER BY boxoffice.rating DESC;

Exercise 7
SELECT DISTINCT building_name,capacity FROM buildings;
 SELECT DISTINCT buildings.building_name, employees.role FROM buildings
    LEFT JOIN employees ON buildings.building_name = employees.building;

ass-8
SELECT name, role, building FROM employees
    LEFT JOIN buildings ON employees.building = buildings.building_name 
  WHERE building IS NULL;

SELECT building_name, name FROM buildings 
    LEFT JOIN employees ON employees.building = buildings.building_name 
  WHERE name IS NULL ;

Exercise 9
SELECT title, (b.domestic_sales + b.international_sales) / 1000000 AS 'sales in millions' 
  FROM movies AS m 
    INNER JOIN boxoffice AS b ON m.id = b.movie_id;
SELECT title, rating * 10 AS 'Rating %'  
  FROM movies AS m 
    INNER JOIN boxoffice AS b ON m.id = b.movie_id;
SELECT title, year FROM movies WHERE year % 2 = 0;

Exercise 10
SELECT name, MAX(years_employed) FROM employees;
SELECT role, AVG(years_employed) as Average_years_employed
  FROM employees
  GROUP BY role;
 SELECT building, SUM(years_employed) FROM employees GROUP BY building

Exercise 11
 SELECT COUNT(*) FROM employees WHERE role LIKE 'artist';
SELECT role, COUNT(name) FROM employees GROUP BY role;
SELECT role, SUM(years_employed) FROM employees 
  GROUP BY role HAVING role LIKE 'engineer';

Exercise 12
SELECT director, COUNT(*) FROM movies GROUP BY director;
SELECT director, SUM(domestic_sales) + SUM(international_sales) AS Total FROM movies 
    LEFT JOIN boxoffice ON movies.id = boxoffice.movie_id 
  GROUP BY director;

Exercise 13
INSERT INTO movies (title, director, year, length_minutes) 
  VALUES ('Toy Story 4', 'John Lasseter', 2019, 123);
 INSERT INTO boxoffice (movie_id, rating, domestic_sales, international_sales) 
  VALUES (15, 8.7, 340000000, 270000000);

Exercise 14
update  movies
set director='John Lasseter'
where title like 'A%Bug%Life';

update  movies
set year=1999
where title = 'Toy Story 2';

update  movies
set title='Toy Story 3',
director='Lee Unkrich'
where title = 'Toy Story 8';

Exercise 15
Delete FROM movies where year<2005;
Delete FROM movies where director='Andrew Stanton';

Exercise 16
create table database(
Name varchar(100)
,Version decimal(8,4),
Download_count decimal(18,0)
);

Exercise 17
Alter table Movies add Aspect_ratio FLOAT;
ALTER TABLE movies ADD language TEXT DEFAULT 'English'

Exercise 18
DROP TABLE movies;
DROP TABLE Boxoffice;